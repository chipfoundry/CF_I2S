<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_e_f___i2_s_8h" kind="file" language="C++">
    <compoundname>EF_I2S.h</compoundname>
    <includes refid="_e_f___i2_s__regs_8h" local="yes">EF_I2S_regs.h</includes>
    <includes refid="_e_f___driver___common_8h" local="yes">EF_Driver_Common.h</includes>
    <includedby refid="_e_f___i2_s_8c" local="yes">EF_I2S.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>EF_Driver_Common.h</label>
        <link refid="_e_f___driver___common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>EF_I2S.h</label>
        <link refid="_e_f___i2_s_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>EF_I2S_regs.h</label>
        <link refid="_e_f___i2_s__regs_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>EF_I2S.c</label>
        <link refid="_e_f___i2_s_8c"/>
      </node>
      <node id="1">
        <label>EF_I2S.h</label>
        <link refid="_e_f___i2_s_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_e_f___i2_s_8h_1aa665f2437319304828ab6c47d3a3143c" prot="public" static="no">
        <name>EF_I2S_CFG_REG_MAX_VALUE</name>
        <initializer>((uint32_t)0x00000FFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="37" column="9" bodyfile="EF_I2S.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_f___i2_s_8h_1aa0571464e60d1c73166d6674e80988d1" prot="public" static="no">
        <name>EF_I2S_PR_REG_MAX_VALUE</name>
        <initializer>((uint32_t)0x000000FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="38" column="9" bodyfile="EF_I2S.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_f___i2_s_8h_1a5346305c9521be4e37ae79948a56b56a" prot="public" static="no">
        <name>EF_I2S_AVGT_REG_MAX_VALUE</name>
        <initializer>((uint32_t)0x0000FFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="39" column="9" bodyfile="EF_I2S.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_f___i2_s_8h_1a46f20acc4b3339159ce41e3ca6435054" prot="public" static="no">
        <name>EF_I2S_ZCRT_REG_MAX_VALUE</name>
        <initializer>((uint32_t)0x0000FFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="40" column="9" bodyfile="EF_I2S.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_f___i2_s_8h_1a7796b3b2ac1573be88b01ff4ae5694e4" prot="public" static="no">
        <name>EF_I2S_RX_FIFO_THRESHOLD_REG_MAX_VALUE</name>
        <initializer>((uint32_t)0x0000000F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="41" column="9" bodyfile="EF_I2S.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_f___i2_s_8h_1a9c5cd2fd6af1c4e7de606986d3a3a535" prot="public" static="no">
        <name>EF_I2S_RX_FIFO_IM_REG_MAX_VALUE</name>
        <initializer>((uint32_t)0x0000003F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="42" column="9" bodyfile="EF_I2S.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_f___i2_s_8h_1a33de3838945b8ac4a1cbcfe54b40da9f" prot="public" static="no">
        <name>EF_I2S_RX_FIFO_IC_REG_MAX_VALUE</name>
        <initializer>((uint32_t)0x0000003F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="43" column="9" bodyfile="EF_I2S.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_e_f___i2_s_8h_1a922081fe31b01334b54a89d5f8e1c2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setGclkEnable</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t value)</argsstring>
        <name>EF_I2S_setGclkEnable</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the GCLK enable bit in the I2S register to a certain value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>An <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref> , which points to the base memory address of I2S registers. <ref refid="_e_f___i2_s__regs_8h_1a71baa92648f7b676d563faa94f5bc528" kindref="member">EF_I2S_TYPE</ref> is a structure that contains the I2S registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the GCLK enable bit</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="61" column="18" bodyfile="EF_I2S.c" bodystart="57" bodyend="69" declfile="EF_I2S.h" declline="61" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a8363eb974d75e82be3e789196bb2c95b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_enable</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_enable</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Enables the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the I2S peripheral by setting the enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="72" column="18" bodyfile="EF_I2S.c" bodystart="71" bodyend="82" declfile="EF_I2S.h" declline="72" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ac8d6abd09cea51b42572106f04a573fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_disable</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_disable</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Disables the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the I2S peripheral by clearing the enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="84" column="18" bodyfile="EF_I2S.c" bodystart="84" bodyend="95" declfile="EF_I2S.h" declline="84" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a3b769d282e6954df57f14765f4366843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_enableFifo</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_enableFifo</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Enables the FIFO feature for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the FIFO feature of the I2S peripheral by setting the FIFO enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="95" column="18" bodyfile="EF_I2S.c" bodystart="98" bodyend="109" declfile="EF_I2S.h" declline="95" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ad49df56dd20e08c02e5efc661a9a9cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_disableFifo</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_disableFifo</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Disables the FIFO feature for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the FIFO feature of the I2S peripheral by clearing the FIFO enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="107" column="18" bodyfile="EF_I2S.c" bodystart="112" bodyend="123" declfile="EF_I2S.h" declline="107" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a48bb6abdf01dea0f16744039d9fd113a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_enableAVG</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_enableAVG</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Enables the AVG feature for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the AVG feature of the I2S peripheral by setting the AVG enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="118" column="18" bodyfile="EF_I2S.c" bodystart="126" bodyend="137" declfile="EF_I2S.h" declline="118" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a28908c1a60a497792bfe591ff05cf6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_disableAVG</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_disableAVG</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Disables the AVG feature for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the AVG feature of the I2S peripheral by clearing the AVG enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="129" column="18" bodyfile="EF_I2S.c" bodystart="140" bodyend="151" declfile="EF_I2S.h" declline="129" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a3e06025f058eb96a083a0b647b872cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_enableZCR</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_enableZCR</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Enables the ZCR feature for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the ZCR feature of the I2S peripheral by setting the ZCR enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="142" column="18" bodyfile="EF_I2S.c" bodystart="154" bodyend="165" declfile="EF_I2S.h" declline="142" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a4abe906ba6d8764231cf2648fd617b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_disableZCR</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_disableZCR</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Disables the ZCR feature for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the ZCR feature of the I2S peripheral by clearing the ZCR enable bit in the control register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="154" column="18" bodyfile="EF_I2S.c" bodystart="167" bodyend="178" declfile="EF_I2S.h" declline="154" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a4714d92aa38d5b05f1a8bb585e09b324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setConfigReg</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t config)</argsstring>
        <name>EF_I2S_setConfigReg</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Sets the configuration register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the configuration register of the I2S peripheral to the specified value. It validates the input parameters to ensure the I2S pointer is not NULL and the configuration value is within the allowed range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration value to be set. Must be less than or equal to <ref refid="_e_f___i2_s_8h_1aa665f2437319304828ab6c47d3a3143c" kindref="member">EF_I2S_CFG_REG_MAX_VALUE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="168" column="18" bodyfile="EF_I2S.c" bodystart="182" bodyend="194" declfile="EF_I2S.h" declline="168" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a261aaf55ebe6faa55a555aa82289376b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setPrescaler</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t prescaler)</argsstring>
        <name>EF_I2S_setPrescaler</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prescaler</declname>
        </param>
        <briefdescription>
<para>Sets the prescaler register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the prescaler register of the I2S peripheral with the specified value. It ensures that the I2S pointer is not NULL and that the prescaler value is within the valid range.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prescaler</parametername>
</parameternamelist>
<parameterdescription>
<para>The prescaler value to be set. Must be less than or equal to <ref refid="_e_f___i2_s_8h_1aa0571464e60d1c73166d6674e80988d1" kindref="member">EF_I2S_PR_REG_MAX_VALUE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="182" column="18" bodyfile="EF_I2S.c" bodystart="197" bodyend="209" declfile="EF_I2S.h" declline="182" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1aa49c1860ce4e076d8bb745409561c3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setAVGT</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t average)</argsstring>
        <name>EF_I2S_setAVGT</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>average</declname>
        </param>
        <briefdescription>
<para>Sets the AVGT register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the average threshold (AVGT) register for the I2S peripheral to the specified value. It ensures that the input pointer and average value are valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">average</parametername>
</parameternamelist>
<parameterdescription>
<para>The average threshold value to be set. Must be less than or equal to <ref refid="_e_f___i2_s_8h_1a5346305c9521be4e37ae79948a56b56a" kindref="member">EF_I2S_AVGT_REG_MAX_VALUE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="196" column="18" bodyfile="EF_I2S.c" bodystart="212" bodyend="224" declfile="EF_I2S.h" declline="196" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ac6e5745e4ce997c1c7d0ac5e188347e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setZCRT</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t average)</argsstring>
        <name>EF_I2S_setZCRT</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>average</declname>
        </param>
        <briefdescription>
<para>Sets the ZCRT register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the zero-crossing threshold (ZCRT) register for the I2S peripheral to the specified value. It validates the input pointer and the threshold value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">average</parametername>
</parameternamelist>
<parameterdescription>
<para>The zero-crossing threshold value to be set. Must be less than or equal to <ref refid="_e_f___i2_s_8h_1a46f20acc4b3339159ce41e3ca6435054" kindref="member">EF_I2S_ZCRT_REG_MAX_VALUE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="209" column="18" bodyfile="EF_I2S.c" bodystart="227" bodyend="239" declfile="EF_I2S.h" declline="209" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1aa01eaa3ec9d57d8008e036d5194a3f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_getRxFifoLevel</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t *level)</argsstring>
        <name>EF_I2S_getRxFifoLevel</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Gets the RX FIFO level of the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the current level of the RX FIFO register from the I2S peripheral and stores it in the memory location pointed to by <computeroutput>level</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">level</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where the RX FIFO level will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="223" column="18" bodyfile="EF_I2S.c" bodystart="241" bodyend="253" declfile="EF_I2S.h" declline="223" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a19b6f17b3fc354afabcd98dd661a1954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setRxFifoThreshold</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t threshold)</argsstring>
        <name>EF_I2S_setRxFifoThreshold</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Sets the RX FIFO threshold for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the RX FIFO threshold register for the I2S peripheral to the specified value. It ensures that the input pointer and threshold value are valid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The RX FIFO threshold value to be set. Must be less than or equal to <ref refid="_e_f___i2_s_8h_1a7796b3b2ac1573be88b01ff4ae5694e4" kindref="member">EF_I2S_RX_FIFO_THRESHOLD_REG_MAX_VALUE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="237" column="18" bodyfile="EF_I2S.c" bodystart="255" bodyend="268" declfile="EF_I2S.h" declline="237" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ac1c6040b6a56703127bd033fcb0fc2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_getRIS</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t *ris_value)</argsstring>
        <name>EF_I2S_getRIS</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>ris_value</declname>
        </param>
        <briefdescription>
<para>Reads the Raw Interrupt Status (RIS) register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the value of the Raw Interrupt Status (RIS) register for the I2S peripheral and stores it in the provided variable. The RIS register contains various status flags that indicate the state of the I2S peripheral. RIS Register Breakdown**:<itemizedlist>
<listitem><para>Bit 0: FIFOE - Receive FIFO is Empty</para>
</listitem><listitem><para>Bit 1: FIFOA - FIFO level is above the set level threshold</para>
</listitem><listitem><para>Bit 2: FIFOF - Receive FIFO is Full.</para>
</listitem><listitem><para>Bit 3: AVGF - The avg is above the threshold.</para>
</listitem><listitem><para>Bit 4: ZCRF - The ZCR is above the threshold.</para>
</listitem><listitem><para>Bit 5: VADF - The Voice Activity Detector flag; active when both ZCR &amp; AVG flags are active.</para>
</listitem><listitem><para>Bits [6-31]: Reserved.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ris_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where the RIS register value will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="262" column="18" bodyfile="EF_I2S.c" bodystart="271" bodyend="283" declfile="EF_I2S.h" declline="262" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a5971ae872cd797d44fbff1b8fbbc790e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_getMIS</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t *mis_value)</argsstring>
        <name>EF_I2S_getMIS</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>mis_value</declname>
        </param>
        <briefdescription>
<para>Reads the Masked Interrupt Status (MIS) register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the value of the Masked Interrupt Status (MIS) register for the I2S peripheral and stores it in the provided variable. The MIS register indicates the current interrupt status after masking. RIS Register Breakdown**:<itemizedlist>
<listitem><para>Bit 0: FIFOE - Receive FIFO is Empty</para>
</listitem><listitem><para>Bit 1: FIFOA - FIFO level is above the set level threshold</para>
</listitem><listitem><para>Bit 2: FIFOF - Receive FIFO is Full.</para>
</listitem><listitem><para>Bit 3: AVGF - The avg is above the threshold.</para>
</listitem><listitem><para>Bit 4: ZCRF - The ZCR is above the threshold.</para>
</listitem><listitem><para>Bit 5: VADF - The Voice Activity Detector flag; active when both ZCR &amp; AVG flags are active.</para>
</listitem><listitem><para>Bits [6-31]: Reserved.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mis_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where the MIS register value will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="285" column="18" bodyfile="EF_I2S.c" bodystart="286" bodyend="298" declfile="EF_I2S.h" declline="285" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ab4fbfff01ed548ecdfe0c62e8b49b053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setIM</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t mask)</argsstring>
        <name>EF_I2S_setIM</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Writes a value to the Interrupt Mask (IM) register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the value of the Interrupt Mask (IM) register for the I2S peripheral. The IM register determines which interrupts are enabled or disabled. RIS Register Breakdown**:<itemizedlist>
<listitem><para>Bit 0: FIFOE - Receive FIFO is Empty</para>
</listitem><listitem><para>Bit 1: FIFOA - FIFO level is above the set level threshold</para>
</listitem><listitem><para>Bit 2: FIFOF - Receive FIFO is Full.</para>
</listitem><listitem><para>Bit 3: AVGF - The avg is above the threshold.</para>
</listitem><listitem><para>Bit 4: ZCRF - The ZCR is above the threshold.</para>
</listitem><listitem><para>Bit 5: VADF - The Voice Activity Detector flag; active when both ZCR &amp; AVG flags are active.</para>
</listitem><listitem><para>Bits [6-31]: Reserved.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be written to the IM register. Must be within the valid range <ref refid="_e_f___i2_s_8h_1a9c5cd2fd6af1c4e7de606986d3a3a535" kindref="member">EF_I2S_RX_FIFO_IM_REG_MAX_VALUE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="308" column="18" bodyfile="EF_I2S.c" bodystart="302" bodyend="314" declfile="EF_I2S.h" declline="308" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a95032b4dbc7f70aef922060820631de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_setIC</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t mask)</argsstring>
        <name>EF_I2S_setIC</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Writes a value to the Interrupt Clear (IC) register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears specific interrupts in the I2S peripheral by writing to the Interrupt Clear (IC) register. RIS Register Breakdown**:<itemizedlist>
<listitem><para>Bit 0: FIFOE - Receive FIFO is Empty</para>
</listitem><listitem><para>Bit 1: FIFOA - FIFO level is above the set level threshold</para>
</listitem><listitem><para>Bit 2: FIFOF - Receive FIFO is Full.</para>
</listitem><listitem><para>Bit 3: AVGF - The avg is above the threshold.</para>
</listitem><listitem><para>Bit 4: ZCRF - The ZCR is above the threshold.</para>
</listitem><listitem><para>Bit 5: VADF - The Voice Activity Detector flag; active when both ZCR &amp; AVG flags are active.</para>
</listitem><listitem><para>Bits [6-31]: Reserved.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be written to the IC register. Must be within the valid range <ref refid="_e_f___i2_s_8h_1a33de3838945b8ac4a1cbcfe54b40da9f" kindref="member">EF_I2S_RX_FIFO_IC_REG_MAX_VALUE</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="330" column="18" bodyfile="EF_I2S.c" bodystart="317" bodyend="329" declfile="EF_I2S.h" declline="330" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1acd181744291db32213010b5450419c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_getIM</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t *im_value)</argsstring>
        <name>EF_I2S_getIM</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>im_value</declname>
        </param>
        <briefdescription>
<para>Reads the Interrupt Mask (IM) register for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the value of the Interrupt Mask (IM) register for the I2S peripheral and stores it in the provided variable. The IM register indicates which interrupts are enabled. RIS Register Breakdown**:<itemizedlist>
<listitem><para>Bit 0: FIFOE - Receive FIFO is Empty</para>
</listitem><listitem><para>Bit 1: FIFOA - FIFO level is above the set level threshold</para>
</listitem><listitem><para>Bit 2: FIFOF - Receive FIFO is Full.</para>
</listitem><listitem><para>Bit 3: AVGF - The avg is above the threshold.</para>
</listitem><listitem><para>Bit 4: ZCRF - The ZCR is above the threshold.</para>
</listitem><listitem><para>Bit 5: VADF - The Voice Activity Detector flag; active when both ZCR &amp; AVG flags are active.</para>
</listitem><listitem><para>Bits [6-31]: Reserved.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">im_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where the IM register value will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="352" column="18" bodyfile="EF_I2S.c" bodystart="333" bodyend="345" declfile="EF_I2S.h" declline="352" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a50ed21a6e834fc0047cb78941a7c8984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_readData</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, uint32_t *data)</argsstring>
        <name>EF_I2S_readData</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads data from the RX FIFO of the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves a data word from the RX FIFO of the specified I2S peripheral. It waits until the RX FIFO has data available before performing the read operation. After reading the data, the RX level interrupt is cleared.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a variable where the read data will be stored.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code.</para>
</simplesect>
<simplesect kind="note"><para>The function uses a busy-wait loop to check the RX FIFO status. Ensure proper system design to avoid potential blocking or infinite loops in case of hardware issues. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="369" column="18" bodyfile="EF_I2S.c" bodystart="347" bodyend="370" declfile="EF_I2S.h" declline="369" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ab5ddd197f14756e1c59fb61046572056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_clearIrqRxempty</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_clearIrqRxempty</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function clears the interrupt corresponding to the receive FIFO empty condition in the I2S peripheral by writing to the Interrupt Clear (IC) register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="381" column="18" bodyfile="EF_I2S.c" bodystart="376" bodyend="386" declfile="EF_I2S.h" declline="381" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ab8e5d164c8010d28a8ecbbfe2d4e2225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_clearIrqRxLevel</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_clearIrqRxLevel</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Clears the receive FIFO level interrupt for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the interrupt corresponding to the receive FIFO level condition in the I2S peripheral by writing to the Interrupt Clear (IC) register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="395" column="18" bodyfile="EF_I2S.c" bodystart="389" bodyend="399" declfile="EF_I2S.h" declline="395" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1aba0bcdf189efb01bb4da0241cf0fff6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_clearIrqRxFull</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_clearIrqRxFull</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Clears the receive FIFO full interrupt for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the interrupt corresponding to the receive FIFO full condition in the I2S peripheral by writing to the Interrupt Clear (IC) register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="408" column="18" bodyfile="EF_I2S.c" bodystart="402" bodyend="412" declfile="EF_I2S.h" declline="408" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a893f62b34da9619b3ff8ff05b1449d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_clearIrqAVGAboveThreshold</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_clearIrqAVGAboveThreshold</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Clears the average above threshold interrupt for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the interrupt corresponding to the average (AVG) being above the threshold in the I2S peripheral by writing to the Interrupt Clear (IC) register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="420" column="18" bodyfile="EF_I2S.c" bodystart="415" bodyend="425" declfile="EF_I2S.h" declline="420" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1ab37aca0b76a291cb4abab5d9b863a59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_clearIrqZCRAboveThreshold</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_clearIrqZCRAboveThreshold</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Clears the zero-crossing rate above threshold interrupt for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the interrupt corresponding to the zero-crossing rate (ZCR) being above the threshold in the I2S peripheral by writing to the Interrupt Clear (IC) register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="436" column="18" bodyfile="EF_I2S.c" bodystart="429" bodyend="439" declfile="EF_I2S.h" declline="436" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a37d38397ddebfe8f2350f18eafb12c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_clearIrqVADFlag</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s)</argsstring>
        <name>EF_I2S_clearIrqVADFlag</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <briefdescription>
<para>Clears the Voice Activity Detector (VAD) flag interrupt for the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the interrupt corresponding to the Voice Activity Detector (VAD) flag in the I2S peripheral by writing to the Interrupt Clear (IC) register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="448" column="18" bodyfile="EF_I2S.c" bodystart="443" bodyend="453" declfile="EF_I2S.h" declline="448" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a5161a349d8c36dd40549d0b15d506182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_RxFIFOAvailable</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, bool *isAvailable)</argsstring>
        <name>EF_I2S_RxFIFOAvailable</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isAvailable</declname>
        </param>
        <briefdescription>
<para>Checks if the RX FIFO has available space in the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the RX FIFO of the I2S peripheral has available space.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isAvailable</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the RX FIFO has available space, or false if it is full.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="464" column="18" bodyfile="EF_I2S.c" bodystart="455" bodyend="471" declfile="EF_I2S.h" declline="464" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a9be165920fd4797aaee9d431df907b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_RxFIFOEmpty</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, bool *isEmpty)</argsstring>
        <name>EF_I2S_RxFIFOEmpty</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isEmpty</declname>
        </param>
        <briefdescription>
<para>Checks if the RX FIFO is empty in the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the RX FIFO of the I2S peripheral is empty.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isEmpty</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the RX FIFO is empty, or false otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="478" column="18" bodyfile="EF_I2S.c" bodystart="475" bodyend="491" declfile="EF_I2S.h" declline="478" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1aa1a5a98b7f41654a70fb37dd49a845de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_RxFIFOFull</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, bool *isFull)</argsstring>
        <name>EF_I2S_RxFIFOFull</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isFull</declname>
        </param>
        <briefdescription>
<para>Checks if the RX FIFO is full in the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the RX FIFO of the I2S peripheral is full.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isFull</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the RX FIFO is full, or false otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="494" column="18" bodyfile="EF_I2S.c" bodystart="495" bodyend="511" declfile="EF_I2S.h" declline="494" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a1bbc7845bff3df3a186fdc851fe6337d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_Busy</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, bool *isBusy)</argsstring>
        <name>EF_I2S_Busy</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isBusy</declname>
        </param>
        <briefdescription>
<para>Checks if the I2S peripheral is busy. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the I2S peripheral is currently busy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isBusy</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the peripheral is busy, or false otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="509" column="18" bodyfile="EF_I2S.c" bodystart="514" bodyend="530" declfile="EF_I2S.h" declline="509" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a458aa2712b7e4bb1880117f2aaf2505b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_FIFOOverThreshold</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, bool *isOverThreshold)</argsstring>
        <name>EF_I2S_FIFOOverThreshold</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOverThreshold</declname>
        </param>
        <briefdescription>
<para>Checks if the RX FIFO level is over the threshold in the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the RX FIFO level has exceeded the threshold in the I2S peripheral.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isOverThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the RX FIFO level is over the threshold, or false otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="525" column="18" bodyfile="EF_I2S.c" bodystart="533" bodyend="549" declfile="EF_I2S.h" declline="525" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a2dc446aadcb9a471bdb6da85323105b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_ZCROverThreshold</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, bool *isOverThreshold)</argsstring>
        <name>EF_I2S_ZCROverThreshold</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOverThreshold</declname>
        </param>
        <briefdescription>
<para>Checks if the zero-crossing rate exceeds the threshold in the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the zero-crossing rate (ZCR) has exceeded the threshold in the I2S peripheral.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isOverThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the ZCR exceeds the threshold, or false otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="539" column="18" bodyfile="EF_I2S.c" bodystart="552" bodyend="568" declfile="EF_I2S.h" declline="539" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_e_f___i2_s_8h_1a2fd0764a05f1ccabe4c00dd122b1ec18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref></type>
        <definition>EF_DRIVER_STATUS EF_I2S_VADFlag</definition>
        <argsstring>(EF_I2S_TYPE_PTR i2s, bool *isOverThreshold)</argsstring>
        <name>EF_I2S_VADFlag</name>
        <param>
          <type><ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref></type>
          <declname>i2s</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isOverThreshold</declname>
        </param>
        <briefdescription>
<para>Checks if the Voice Activity Detector (VAD) flag is set in the I2S peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the Voice Activity Detector (VAD) flag is set in the I2S peripheral.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i2s</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the I2S base address structure <ref refid="_e_f___i2_s__regs_8h_1a3b020f0a7eb618a2bd99dca20b454eb0" kindref="member">EF_I2S_TYPE_PTR</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isOverThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a boolean variable that will be set to true if the VAD flag is set, or false otherwise.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status A value of type <ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref> : returns a success or error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="EF_I2S.h" line="554" column="18" bodyfile="EF_I2S.c" bodystart="571" bodyend="587" declfile="EF_I2S.h" declline="554" declcolumn="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>C header file for I2S APIs which contains the function prototypes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>2025<sp/>Efabless<sp/>Corp.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EF_I2S_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/>Includes</highlight></codeline>
<codeline lineno="30"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_e_f___i2_s__regs_8h" kindref="compound">EF_I2S_regs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_e_f___driver___common_8h" kindref="compound">EF_Driver_Common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="35"><highlight class="comment">*<sp/>Macros<sp/>and<sp/>Constants</highlight></codeline>
<codeline lineno="36"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="_e_f___i2_s_8h_1aa665f2437319304828ab6c47d3a3143c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_CFG_REG_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000FFF)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>12<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="_e_f___i2_s_8h_1aa0571464e60d1c73166d6674e80988d1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_PR_REG_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x000000FF)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="_e_f___i2_s_8h_1a5346305c9521be4e37ae79948a56b56a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_AVGT_REG_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000FFFF)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="_e_f___i2_s_8h_1a46f20acc4b3339159ce41e3ca6435054" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_ZCRT_REG_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000FFFF)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="_e_f___i2_s_8h_1a7796b3b2ac1573be88b01ff4ae5694e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_RX_FIFO_THRESHOLD_REG_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000000F)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="_e_f___i2_s_8h_1a9c5cd2fd6af1c4e7de606986d3a3a535" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_RX_FIFO_IM_REG_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000003F)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="_e_f___i2_s_8h_1a33de3838945b8ac4a1cbcfe54b40da9f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EF_I2S_RX_FIFO_IC_REG_MAX_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000003F)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="48"><highlight class="comment">*<sp/>Typedefs<sp/>and<sp/>Enums</highlight></codeline>
<codeline lineno="49"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="52"><highlight class="comment">*<sp/>Function<sp/>Prototypes</highlight></codeline>
<codeline lineno="53"><highlight class="comment">******************************************************************************/</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a922081fe31b01334b54a89d5f8e1c2c1" kindref="member">EF_I2S_setGclkEnable</ref><sp/>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a8363eb974d75e82be3e789196bb2c95b" kindref="member">EF_I2S_enable</ref><sp/>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ac8d6abd09cea51b42572106f04a573fb" kindref="member">EF_I2S_disable</ref><sp/>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a3b769d282e6954df57f14765f4366843" kindref="member">EF_I2S_enableFifo</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ad49df56dd20e08c02e5efc661a9a9cc6" kindref="member">EF_I2S_disableFifo</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a48bb6abdf01dea0f16744039d9fd113a" kindref="member">EF_I2S_enableAVG</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a28908c1a60a497792bfe591ff05cf6f9" kindref="member">EF_I2S_disableAVG</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a3e06025f058eb96a083a0b647b872cbc" kindref="member">EF_I2S_enableZCR</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a4abe906ba6d8764231cf2648fd617b83" kindref="member">EF_I2S_disableZCR</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a4714d92aa38d5b05f1a8bb585e09b324" kindref="member">EF_I2S_setConfigReg</ref><sp/>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>config);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a261aaf55ebe6faa55a555aa82289376b" kindref="member">EF_I2S_setPrescaler</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>prescaler);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1aa49c1860ce4e076d8bb745409561c3c7" kindref="member">EF_I2S_setAVGT</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>average);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ac6e5745e4ce997c1c7d0ac5e188347e2" kindref="member">EF_I2S_setZCRT</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>average);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1aa01eaa3ec9d57d8008e036d5194a3f11" kindref="member">EF_I2S_getRxFifoLevel</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t*<sp/>level);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a19b6f17b3fc354afabcd98dd661a1954" kindref="member">EF_I2S_setRxFifoThreshold</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>threshold);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ac1c6040b6a56703127bd033fcb0fc2ab" kindref="member">EF_I2S_getRIS</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t*<sp/>ris_value);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a5971ae872cd797d44fbff1b8fbbc790e" kindref="member">EF_I2S_getMIS</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t*<sp/>mis_value);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ab4fbfff01ed548ecdfe0c62e8b49b053" kindref="member">EF_I2S_setIM</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a95032b4dbc7f70aef922060820631de1" kindref="member">EF_I2S_setIC</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1acd181744291db32213010b5450419c59" kindref="member">EF_I2S_getIM</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t*<sp/>im_value);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a50ed21a6e834fc0047cb78941a7c8984" kindref="member">EF_I2S_readData</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/>uint32_t*<sp/>data);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ab5ddd197f14756e1c59fb61046572056" kindref="member">EF_I2S_clearIrqRxempty</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ab8e5d164c8010d28a8ecbbfe2d4e2225" kindref="member">EF_I2S_clearIrqRxLevel</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1aba0bcdf189efb01bb4da0241cf0fff6c" kindref="member">EF_I2S_clearIrqRxFull</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a893f62b34da9619b3ff8ff05b1449d5d" kindref="member">EF_I2S_clearIrqAVGAboveThreshold</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1ab37aca0b76a291cb4abab5d9b863a59c" kindref="member">EF_I2S_clearIrqZCRAboveThreshold</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a37d38397ddebfe8f2350f18eafb12c4f" kindref="member">EF_I2S_clearIrqVADFlag</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a5161a349d8c36dd40549d0b15d506182" kindref="member">EF_I2S_RxFIFOAvailable</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>isAvailable);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a9be165920fd4797aaee9d431df907b53" kindref="member">EF_I2S_RxFIFOEmpty</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>isEmpty);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1aa1a5a98b7f41654a70fb37dd49a845de" kindref="member">EF_I2S_RxFIFOFull</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>isFull);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a1bbc7845bff3df3a186fdc851fe6337d" kindref="member">EF_I2S_Busy</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>isBusy);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a458aa2712b7e4bb1880117f2aaf2505b" kindref="member">EF_I2S_FIFOOverThreshold</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>isOverThreshold);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a2dc446aadcb9a471bdb6da85323105b7" kindref="member">EF_I2S_ZCROverThreshold</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>isOverThreshold);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><ref refid="_e_f___driver___common_8h_1ad1c99136d1edfd0a7757f5b81600a351" kindref="member">EF_DRIVER_STATUS</ref><sp/><ref refid="_e_f___i2_s_8h_1a2fd0764a05f1ccabe4c00dd122b1ec18" kindref="member">EF_I2S_VADFlag</ref>(<ref refid="struct___e_f___i2_s___t_y_p_e__" kindref="compound">EF_I2S_TYPE_PTR</ref><sp/>i2s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>isOverThreshold);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>write<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//EF_DRIVER_STATUS<sp/>EF_I2S_getConfigReg<sp/>(EF_I2S_TYPE_PTR<sp/>i2s,<sp/>uint32_t*<sp/>config);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>write<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//EF_DRIVER_STATUS<sp/>EF_I2S_getPrescaler(EF_I2S_TYPE_PTR<sp/>i2s,<sp/>uint32_t*<sp/>prescaler);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>write<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//EF_DRIVER_STATUS<sp/>EF_I2S_getRxFifoThreshold(EF_I2S_TYPE_PTR<sp/>i2s,<sp/>uint32_t*<sp/>threshold);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="570"><highlight class="comment">*<sp/>External<sp/>Variables</highlight></codeline>
<codeline lineno="571"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>EF_I2S_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="577"><highlight class="comment">*<sp/>End<sp/>of<sp/>File</highlight></codeline>
<codeline lineno="578"><highlight class="comment">******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="EF_I2S.h"/>
  </compounddef>
</doxygen>
