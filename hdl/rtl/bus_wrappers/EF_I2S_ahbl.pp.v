
/*
	Copyright 2023 Efabless Corp.

	Author: Mohamed Shalan (mshalan@efabless.com)

	This file is auto-generated by wrapper_gen.py on 2023-11-06

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

*/


`timescale			1ns/1ns
`default_nettype	none





module EF_I2S_ahbl (
	output	wire 		ws,
	output	wire 		sck,
	input	wire 		sdi,
	output	wire 		sdo,
	input	wire 		HCLK,
	input	wire 		HRESETn,
	input	wire [31:0]	HADDR,
	input	wire 		HWRITE,
	input	wire [1:0]	HTRANS,
	input	wire 		HREADY,
	input	wire 		HSEL,
	input	wire [2:0]	HSIZE,
	input	wire [31:0]	HWDATA,
	output	wire [31:0]	HRDATA,
	output	wire 		HREADYOUT,
	output	wire 		irq
);
	localparam[15:0] RXDATA_REG_ADDR = 16'h0000;
	localparam[15:0] PRESCALE_REG_ADDR = 16'h0004;
	localparam[15:0] FIFOLEVEL_REG_ADDR = 16'h0008;
	localparam[15:0] RXFIFOT_REG_ADDR = 16'h000c;
	localparam[15:0] CONTROL_REG_ADDR = 16'h0010;
	localparam[15:0] CONFIG_REG_ADDR = 16'h0014;
	localparam[15:0] ICR_REG_ADDR = 16'h0f00;
	localparam[15:0] RIS_REG_ADDR = 16'h0f04;
	localparam[15:0] IM_REG_ADDR = 16'h0f08;
	localparam[15:0] MIS_REG_ADDR = 16'h0f0c;

	reg             last_HSEL;
	reg [31:0]      last_HADDR;
	reg             last_HWRITE;
	reg [1:0]       last_HTRANS;

	always@ (posedge HCLK or negedge HRESETn) begin
		if (!HRESETn) begin
			last_HSEL       <= 0;
			last_HADDR      <= 0;
			last_HWRITE     <= 0;
			last_HTRANS     <= 0;
		end else if (HREADY) begin
			last_HSEL       <= HSEL;
			last_HADDR      <= HADDR;
			last_HWRITE     <= HWRITE;
			last_HTRANS     <= HTRANS;
		end
	end

	reg	[7:0]	PRESCALE_REG;
	reg	[4:0]	RXFIFOT_REG;
	reg	[0:0]	CONTROL_REG;
	reg	[8:0]	CONFIG_REG;
	reg	[2:0]	RIS_REG;
	reg	[2:0]	ICR_REG;
	reg	[2:0]	IM_REG;

	wire[31:0]	fifo_rdata;
	wire[31:0]	RXDATA_REG	= fifo_rdata;
	wire[7:0]	sck_prescaler	= PRESCALE_REG[7:0];
	wire[4:0]	fifo_level;
	wire[4:0]	FIFOLEVEL_REG	= fifo_level;
	wire[4:0]	fifo_level_threshold	= RXFIFOT_REG[4:0];
	wire		en	= CONTROL_REG[0:0];
	wire[1:0]	channels	= CONFIG_REG[1:0];
	wire		sign_extend	= CONFIG_REG[2:2];
	wire		left_justified	= CONFIG_REG[3:3];
	wire[4:0]	sample_size	= CONFIG_REG[8:4];
	wire		fifo_empty;
	wire		_EMPTY_FLAG_FLAG_	= fifo_empty;
	wire		fifo_level_above;
	wire		_ABOVE_FLAG_FLAG_	= fifo_level_above;
	wire		fifo_full;
	wire		_FULL_FLAG_FLAG_	= fifo_full;
	wire[2:0]	MIS_REG	= RIS_REG & IM_REG;
	wire		ahbl_valid	= last_HSEL & last_HTRANS[1];
	wire		ahbl_we	= last_HWRITE & ahbl_valid;
	wire		ahbl_re	= ~last_HWRITE & ahbl_valid;
	wire		_clk_	= HCLK;
	wire		_rst_	= ~HRESETn;
	wire		rd	= (ahbl_re & (last_HADDR[15:0]==RXDATA_REG_ADDR));

	EF_I2S inst_to_wrap (
		.clk(_clk_),
		.rst_n(~_rst_),
		.ws(ws),
		.sck(sck),
		.sdi(sdi),
		.sdo(sdo),
		.fifo_rd(fifo_rd),
		.fifo_level_threshold(fifo_level_threshold),
		.fifo_full(fifo_full),
		.fifo_empty(fifo_empty),
		.fifo_level(fifo_level),
		.fifo_level_above(fifo_level_above),
		.fifo_rdata(fifo_rdata),
		.sign_extend(sign_extend),
		.left_justified(left_justified),
		.sample_size(sample_size),
		.sck_prescaler(sck_prescaler),
		.channels(channels),
		.en(en)
	);

	always @(posedge HCLK or negedge HRESETn) if(~HRESETn) PRESCALE_REG <= 0; else if(ahbl_we & (last_HADDR[15:0]==PRESCALE_REG_ADDR)) PRESCALE_REG <= HWDATA[8-1:0];
	always @(posedge HCLK or negedge HRESETn) if(~HRESETn) RXFIFOT_REG <= 0; else if(ahbl_we & (last_HADDR[15:0]==RXFIFOT_REG_ADDR)) RXFIFOT_REG <= HWDATA[5-1:0];
	always @(posedge HCLK or negedge HRESETn) if(~HRESETn) CONTROL_REG <= 0; else if(ahbl_we & (last_HADDR[15:0]==CONTROL_REG_ADDR)) CONTROL_REG <= HWDATA[1-1:0];
	always @(posedge HCLK or negedge HRESETn) if(~HRESETn) CONFIG_REG <= 0; else if(ahbl_we & (last_HADDR[15:0]==CONFIG_REG_ADDR)) CONFIG_REG <= HWDATA[9-1:0];
	always @(posedge HCLK or negedge HRESETn) if(~HRESETn) IM_REG <= 0; else if(ahbl_we & (last_HADDR[15:0]==IM_REG_ADDR)) IM_REG <= HWDATA[3-1:0];

	always @(posedge HCLK or negedge HRESETn) if(~HRESETn) ICR_REG <= 3'b0; else if(ahbl_we & (last_HADDR[15:0]==ICR_REG_ADDR)) ICR_REG <= HWDATA[3-1:0]; else ICR_REG <= 3'd0;

	always @(posedge HCLK or negedge HRESETn)
		if(~HRESETn) RIS_REG <= 32'd0;
		else begin
			if(_EMPTY_FLAG_FLAG_) RIS_REG[0] <= 1'b1; else if(ICR_REG[0]) RIS_REG[0] <= 1'b0;
			if(_ABOVE_FLAG_FLAG_) RIS_REG[1] <= 1'b1; else if(ICR_REG[1]) RIS_REG[1] <= 1'b0;
			if(_FULL_FLAG_FLAG_) RIS_REG[2] <= 1'b1; else if(ICR_REG[2]) RIS_REG[2] <= 1'b0;

		end

	assign irq = |MIS_REG;

	assign	HRDATA = 
			(last_HADDR[15:0] == PRESCALE_REG_ADDR) ? PRESCALE_REG :
			(last_HADDR[15:0] == RXFIFOT_REG_ADDR) ? RXFIFOT_REG :
			(last_HADDR[15:0] == CONTROL_REG_ADDR) ? CONTROL_REG :
			(last_HADDR[15:0] == CONFIG_REG_ADDR) ? CONFIG_REG :
			(last_HADDR[15:0] == RIS_REG_ADDR) ? RIS_REG :
			(last_HADDR[15:0] == ICR_REG_ADDR) ? ICR_REG :
			(last_HADDR[15:0] == IM_REG_ADDR) ? IM_REG :
			(last_HADDR[15:0] == RXDATA_REG_ADDR) ? RXDATA_REG :
			(last_HADDR[15:0] == FIFOLEVEL_REG_ADDR) ? FIFOLEVEL_REG :
			(last_HADDR[15:0] == MIS_REG_ADDR) ? MIS_REG :
			32'hDEADBEEF;


	assign HREADYOUT = 1'b1;

endmodule
